import osimport jsonimport requestsfrom dotenv import load_dotenvimport unittestfrom unittest.mock import patch, mock_open# Загружаем переменные окруженияload_dotenv()API_KEY = os.getenv("EXCHANGE_RATES_API_KEY")BASE_URL = "https://api.apilayer.com/exchangerates_data/convert"# Путь к файлу с транзакциямиOPERATIONS_FILE = os.path.join("data", "operations.json")def load_transactions():    """    Загружаем транзакции из JSON-файла.    """    if not os.path.exists(OPERATIONS_FILE):        return []    try:        with open(OPERATIONS_FILE, "r", encoding="utf-8") as file:            return json.load(file)    except (json.JSONDecodeError, FileNotFoundError):        return []def get_transaction_by_id(transaction_id: int) -> dict:    """    Находим транзакцию по id в JSON-файле.    """    transactions = load_transactions()    for transaction in transactions:        if transaction["id"] == transaction_id:            return transaction    return Nonedef convert_to_rubles_by_transaction_id(transaction_id: int) -> float:    """    Конвертируем сумму транзакции в рубли по ID транзакции.    """    transaction = get_transaction_by_id(transaction_id)    amount = float(transaction["operationAmount"]["amount"])    currency_code = transaction["operationAmount"]["currency"]["code"]    # Если валюта уже RUB, то конвертация не нужна    if currency_code == "RUB":        return amount    # Параметры запроса    params = {        "from": currency_code,        "to": "RUB",        "amount": amount,    }    headers = {        "apikey": API_KEY    }    #Выполняем запрос к API    response = requests.get(BASE_URL, params=params, headers=headers)    response.raise_for_status()    data = response.json()    # Возвращаем результат конвертации    return data.get("result", 0.0)